#                Travis Config File
#                       |
#                       V

# We need to make sure that Travis has the ability to somehow reach out to our
# k8s cluster and make changes to it, or essentially run a series of configuration
# files and apply them to our cluster.
#

# We use sudo, because we are making use of Docker
sudo: required
services:
   # We require the Docker service to be pre-installed as soon as we try to run our
   # build, because we definitely need Travis to build our Images and even run that
   # test Container after that.
   - docker

# The environment variable set here will be available in the deploy.sh as well.
env:
   global:
      # git rev-parse HEAD   returns the unique ID of the HEAD commit.
      # SHA is an environment variable holding the unique ID of the HEAD commit.
      - SHA=$(git rev-parse HEAD)
      # This is going to configure Google Cloud CLI and make sure that it does not
      # try to display any prompts that require user input.
      - CLOUDSDK_CORE_DISABLE_PROMPTS=1

#
# This is going to be a series of steps that is going to essentially do just about
# everything up to the "Build the 'test' version of multi-client" point (i.e. step 4).
before_install:
   #
   # The open SSL command right below takes that encrypted file and then
   # it decrypts it and places it into our root project directory.
   #
   - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d
   # 1. Install Google Cloud SDK (i.e. a CLI).
   #
   # This will install all the core command line tools necessary for working with
   # the Google Cloud Platform.
   - curl https://sdk.cloud.google.com | bash > /dev/null;

   # This is going to look at the default install directory of Google Cloud SDK which is again
   # by default at ~/google-cloud-sdk Google Cloud SDK , and it is going to source the file
   # path.bash.inc
   # Essentially that just means that there is some configuration that is going to modify our shell inside
   # of Travis CI inside this file (i.e. "path.bash.inc" file), and we're going to apply that additional
   # configuration through the source command.
   #
   # The "source" is a shell built-in command which is used to read and execute the content of a file
   # (generally set of commands), passed as an argument in the current shell script.
   - source $HOME/google-cloud-sdk/path.bash.inc

   # This is going to download and install the kubectl command line tool inside of our Travis environment.
   # We're going to eventually use this kubectl to apply all those different configuration files,
   # and some of the other Imperative commands we have to run to set our Images on each Deployment.
   - gcloud components update kubectl

   #
   # So, in order to tell Google Cloud SDK who we are and give it access to our account, we have to activate
   # a service account and then provide a set of credentials inside of a file that we are calling service-accounts.json .
   # Phrased differently, we essentially authorize the Google Cloud SDK with some service account and
   # the credentials for that are going to be placed inside of this service-account.json file .
   #
   # So, now, when we call gcloud auth activate-service-account right here, and specify the key file of service-account.json,
   # that file has already been unencrypted and placed into our project directory.
   - gcloud auth activate-service-account --key-file service-account.json

     # 2. Configure the SDK with our Google Cloud auth info
     # .i.e to configure our SDK with the service account file that
     # we just uploaded and encrypted..

   # we need to tell the gcloud exactly which project we want to work on.
   - gcloud config set project voltaic-sensor-291013
   - gcloud config set compute/zone europe-north1-a
   - gcloud container clusters get-credentials multi-cluster

   # 3. Login to Docker CLI.
   # We have access to Docker because we specified it as a service inside of our yml file.
   # This assumes that we have already set up environment variables of DOCKER_USERNAMEand DOCKER_PASSWORD on
   # our Travis dashboard.

   - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

   # 4. Build the 'test' version of multi-client.
   - docker build -t gvellis/react-test -f ./client/Dockerfile.dev ./client

# 5. Run tests.
script:
   - docker run -e CI=true gvellis/react-test npm test

# 6. If tests are successful, run a script to deploy newest images.
deploy:
   # This tells Travis that, Hey, do not try to do anything with our project
   # we will take care of the deployment. Just run the script file for us.
   #
   # Supported providers are listed here: https://docs.travis-ci.com/user/deployment/#supported-providers
   provider: script
   #  We specify a command to run that is going to essentially be the script
   # that we want Travis to execute.
   # This script will:
   # 7. Build all our images, tag each one, push each to Docker Hub.
   # 8. Apply all configs in the 'k8s' folder.
   # 9. Imperatively set latest images on each deployment.
   # So, this right here  is what is telling Travis, do not worry about the deployment,.
   # just run this command for us right here, and we will do the deployment ourselves.
   script: bash ./deploy.sh

   # So, remember, if we are pushing up something like "feature" or "development" branch,
   # we probably do not want to execute this deployed script. We only want to do our deployment
   # if we are pushing up branch "master". So, only for working on the "master" branch do we want
   # to run this command right here, which is going to run that deploy script file and attempt
   # to deploy all of our new images out.
   on:
      branch: master
