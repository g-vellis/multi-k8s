# 1. Tell Nginx there is an "upstream" server at client:3000

# This sets up the definition of an upstream called: "client"
upstream client {
    # "server" --> means that the upstream refers to a server 
    # which is hosted at: "client:3000" (i.e. host:port). 
    # So, client:3000 is how you can access it. 
    server client:3000;
}

# 2. Tell Nginx there is an "upstream" server at api:3000

upstream api {
          # the server address called server. 
    server api:5000;
}

# 3. Listen of port 80
server {
    # So we're going to say Nginx, we want there 
    # to be a server that listens on port 80. 
    listen 80;

    # Here we are going to setup our two routing rules. 

    # 4. If anyone comes to "/" send them to client upstream


    # If anyone ever goes to: "/", set up a proxy 
    # and essentially pass through this request to the "client" upstream.
    location / {
        proxy_pass http://client;
    }


    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        # to enable web socket connections
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    # 5. If anyone comes to "/api" send them to api upstream (also remove /api from the received URL before routing it).

    # If anyone ever comes to "/api", then pass this request upstream 
    # to: http://api; 
    location /api {
        access_log off;
        # remove the /api from the request path.
        # This is a rewrite directive, or a rewrite rule. 
        # It means, apply a regex of "/api" , i.e.so, essentially 
        # it says: match this regex against the pathname. 
        # And if we match anything to this, then take off the /api/ and
        # leave it as just "/$1". 
        # The $1 regex is actually a reference to whatever text was matched 
        # by the following regex:  (.*)  
        # The "break"" word on the very end is a directive and it essentially means 
        # do not try to apply any other rewrite rules after applying this one. 
        # The reason we put in "break" here is essentially to stop from keeping going on
        # through continuous rules as Nginx rewrites the URL and then tries 
        # to match it to a new route with the new rewritten URL.
        rewrite /api/(.*) /$1 break;

        proxy_pass http://api;
    }

}




